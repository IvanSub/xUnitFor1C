Перем _Форма;

Перем	юТест;

Перем	мИменаОсновныхФорм;
Перем	мИменаОсновныхФорм_Списки;
Перем	мИменаОсновныхФорм_Объекты;
Перем	мПолучениеФорм;

// основная процедура для юнит-тестирования SnowTest
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;

	СоздатьФорму_ПолучениеФорм();
	СоздатьИменаОсновныхФорм();	
	
	ДобавитьТестДляМетаданного_Справочник_Объекты(ВсеТесты, Метаданные.Документы, "Тест_ОткрытьФормуСуществующегоДокумента", ПолучитьСписокИсключений_Документы_Существующие(),
		мИменаОсновныхФорм_Объекты, "Существующие документы");
		
	ДобавитьТестДляМетаданного_Справочник_Объекты(ВсеТесты, Метаданные.Документы, "Тест_ПеренестиДокументНаТекущийДень_и_ОткрытьЕгоФорму", ПолучитьСписокИсключений_Документы_ПеренестиДату(),
		мИменаОсновныхФорм_Объекты, "Перенос документа на текущий день");
		
	ДобавитьТестДляМетаданного_Справочник_Объекты(ВсеТесты, Метаданные.Документы, "Тест_ОткрытьФормуНовогоДокумента", ПолучитьСписокИсключений_Документы_Новые(),
		мИменаОсновныхФорм_Объекты, "Новые документы");

	ДобавитьТестДляМетаданного_Справочник_Объекты(ВсеТесты, Метаданные.Справочники, "Тест_ОткрытьФормуСуществующегоЭлементаСправочника", ПолучитьСписокИсключений_Справочники_Существующие(), 
		мИменаОсновныхФорм_Объекты, "Существующие элементы");
	ДобавитьТестДляМетаданного_Справочник_Объекты(ВсеТесты, Метаданные.Справочники, "Тест_ОткрытьФормуНовогоЭлементаСправочника", ПолучитьСписокИсключений_Справочники_Новые(), 
		мИменаОсновныхФорм_Объекты, "Новые элементы");
	ДобавитьТестДляМетаданного_Справочник_Объекты(ВсеТесты, Метаданные.Справочники, "Тест_ОткрытьФормуНовогоЭлементаСправочникаСоздаваемогоКопированием", ПолучитьСписокИсключений_Справочники_Новые(), 
		мИменаОсновныхФорм_Объекты, "Новые через копирование элементы");
	
	ДобавитьТестДляМетаданного(ВсеТесты, Метаданные.Справочники, "ТестДолжен_ОткрытьФорму_ПоМетаФорме", ПолучитьСписокИсключений_Справочники_Списки(), мИменаОсновныхФорм_Списки);
	ДобавитьТестДляМетаданного(ВсеТесты, Метаданные.Документы, "ТестДолжен_ОткрытьФорму_ПоМетаФорме", ПолучитьСписокИсключений_Документы_Списки(), мИменаОсновныхФорм_Списки);
	
	ДобавитьТестДляМетаданного(ВсеТесты, Метаданные.Отчеты, "ТестДолжен_ОткрытьФорму_ПоМетаФорме", ПолучитьСписокИсключений_Отчеты(), мИменаОсновныхФорм);
	ДобавитьТестДляМетаданного(ВсеТесты, Метаданные.Обработки, "ТестДолжен_ОткрытьФорму_ПоМетаФорме", ПолучитьСписокИсключений_Обработки(), мИменаОсновныхФорм);

	Возврат ВсеТесты;
КонецФункции

Процедура ПередЗапускомТеста()
	//НачатьТранзакцию();
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	//НачатьТранзакцию();
	
	ЗакрытьФорму();
	
	//Если ТранзакцияАктивна() Тогда
	//	ОтменитьТранзакцию();
	//КонецЕсли;
КонецПроцедуры

Процедура ЗакрытьФорму()
	Если ТипЗнч(_Форма) <> Тип("Форма") и ТипЗнч(_Форма) <> Тип("УправляемаяФорма") Тогда
		Возврат;
	КонецЕсли; 
	_Форма.Модифицированность = Ложь;
	Если _Форма.Открыта() Тогда
		_Форма.Модифицированность = Ложь;
		Попытка
			_Форма.Закрыть();
		Исключение
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
				//ДобавитьСтрокуРезультата(ИмяОперации, ИнформацияОбОшибке());
			НачатьТранзакцию();
			_Форма.УстановитьДействие("ПередЗакрытием", Неопределено);
			_Форма.УстановитьДействие("ПриЗакрытии", Неопределено);
			_Форма.Закрыть();
			ВызватьИсключение Ошибка; 			
		КонецПопытки;
	Иначе
		Попытка
			_Форма.Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;
	_Форма = "";

КонецПроцедуры

//{ блок работы с обычными и управляемыми формами - портирован из "Инструменты разработчика"
Процедура ТестДолжен_ОткрытьФорму_ПоМетаФорме(МетаФорма_ПолноеИмя) Экспорт
	ОткрытьФорму_ПоМетаФорме(МетаФорма_ПолноеИмя);
КонецПроцедуры

Процедура ОткрытьФорму_ПоМетаФорме(МетаФорма_ПолноеИмя, МетаФорма_Имя = "", СсылкаОбъектаИлиСамОбъект = Неопределено, СоздаватьОбъект = Ложь) Экспорт
	
	ВыводитьСообщения = Ложь;
	ВыводитьСообщенияВЖурналРегистрации = Ложь;
	ВнешнийОбъект = Неопределено;
	КлючВременнойФормы = "908насмь9ыв";
	
	ИмяОперации = МетаФорма_ПолноеИмя; //МетаФорма.ПолноеИмя();
	//Если ВнешнийОбъект <> Неопределено Тогда
	//	ИмяОперации = Сред(ВнешнийОбъект.ИспользуемоеИмяФайла, СтрДлина(КаталогВнешнихМетаданных) + 2) + "." + ИмяОперации;
	//КонецЕсли; 
	Если ВыводитьСообщения Тогда
		Сообщить(ИмяОперации);
	КонецЕсли; 
	Если ВыводитьСообщенияВЖурналРегистрации Тогда
		ЗаписьЖурналаРегистрации(Метаданные().Имя, УровеньЖурналаРегистрации.Информация, , , "Операция: " + ИмяОперации);
	КонецЕсли;
	//НачатьТранзакцию();
	//Попытка
	Форма = ПолучитьНовуюФорму(МетаФорма_ПолноеИмя, ВнешнийОбъект, КлючВременнойФормы);
	Если Форма = Неопределено Тогда
		//ОтменитьТранзакцию();
		Возврат; //Продолжить;
	КонецЕсли;
	ЭтоФормаСсылочногоОбъекта = Ложь;
	Если СсылкаОбъектаИлиСамОбъект <> Неопределено Тогда
		ЭтоФормаСсылочногоОбъекта = Истина;
	Иначе
		Если ЭтоОбычнаяФорма(Форма) Тогда //МетаФорма.ТипФормы <> Метаданные.СвойстваОбъектов.ТипФормы.Управляемая
			Попытка
				Пустышка = Форма.ЭтотОбъект.ЭтоНовый();
				ЭтоФормаСсылочногоОбъекта = Истина;
			Исключение
			КонецПопытки;
		Иначе
			Если Форма.Параметры.Свойство("Ключ") Тогда
				Попытка
					Пустышка = Форма.Параметры.Ключ.Ссылка;
					ЭтоФормаСсылочногоОбъекта = Истина;
				Исключение
				КонецПопытки;
			КонецЕсли; 
		КонецЕсли; 
		Если ЭтоФормаСсылочногоОбъекта Тогда
			Если ЭтоОбычнаяФорма(Форма) Тогда
				СсылкаОбъектаИлиСамОбъект = Форма.Ссылка;
			Иначе
				СсылкаОбъектаИлиСамОбъект = Форма.Параметры.Ключ;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоФормаСсылочногоОбъекта Тогда
		Если ЭтоОбычнаяФорма(Форма) Тогда
			Если СоздаватьОбъект Тогда
				Если СсылкаОбъектаИлиСамОбъект <> Неопределено Тогда
					СсылочныйОбъект = СсылкаОбъектаИлиСамОбъект.Скопировать();
					//Иначе
					//	СсылочныйОбъект = СсылкаОбъектаИлиСамОбъект.Метаданные;
				КонецЕсли;
			Иначе
				СсылочныйОбъект = СсылкаОбъектаИлиСамОбъект;
			КонецЕсли;
			Форма = СсылочныйОбъект.ПолучитьФорму(МетаФорма_Имя, , КлючВременнойФормы);
		Иначе
			ПараметрыФормы = Новый Структура;
			ЭтоОбъект = Ложь;
			Попытка
				Пустышка = СсылкаОбъектаИлиСамОбъект.ЭтотОбъект;
				ЭтоОбъект = Истина;
			Исключение
			КонецПопытки;
			Если СоздаватьОбъект Тогда
				Если Не ЭтоОбъект Тогда
					ПараметрыФормы.Вставить("ЗначениеКопирования", СсылкаОбъектаИлиСамОбъект);
				КонецЕсли;
			ИначеЕсли Не ЭтоОбъект Тогда
				ПараметрыФормы.Вставить("Ключ", СсылкаОбъектаИлиСамОбъект);
			КонецЕсли;
			Форма = ПолучитьФормуЛкс(МетаФорма_ПолноеИмя, ПараметрыФормы, , КлючВременнойФормы);
		КонецЕсли; 
		//	//Если ЭтоОбычнаяФорма(Форма) Тогда
		//	//	СсылкаОбъекта = Форма.Ссылка;
		//	//Иначе
		//	//	СсылкаОбъекта = Форма.Параметры.Ключ;
		//	//КонецЕсли; 
		////	МенеджерТипаОбъектаФормы = ирГлобальный.ЛксПолучитьМенеджер(СсылкаОбъекта);
		////	Выборка = МенеджерТипаОбъектаФормы.Выбрать();
		//	Если ЭтоОбычнаяФорма(Форма) Тогда
		//		СсылочныйОбъект = СсылкаОбъекта.Скопировать();
		//		Форма = СсылочныйОбъект.ПолучитьФорму(МетаФорма_Имя, , КлючВременнойФормы);
		////		Если Выборка.Следующий() Тогда
		////			СсылочныйОбъект = Выборка.ПолучитьОбъект();
		////			СсылочныйОбъект = СсылочныйОбъект.Скопировать();
		////		Иначе
		////			СсылочныйОбъект = ирНеглобальный.СоздатьСсылочныйОбъектПоМетаданнымЛкс(МетаОбъект);
		////			ЗаполнитьРеквизитыНепустымиЗначениями(СсылочныйОбъект, МетаОбъект);
		////		КонецЕсли; 
		////		Если МенеджерТипаОбъектаФормы = МенеджерОбъектаМетаданных Тогда
		////			Форма = СсылочныйОбъект.ПолучитьФорму(МетаФорма.Имя, , КлючВременнойФормы);
		////		Иначе
		////			// Дольше но универсальнее
		////			Форма = ПолучитьНовуюФорму(МетаФорма, ВнешнийОбъект, КлючВременнойФормы);
		////			Форма[мПлатформа.ПолучитьИмяОсновногоРеквизитаФормы(Форма)] = СсылочныйОбъект;
		////		КонецЕсли; 							
		//	Иначе
		//		ПараметрыФормы = Новый Структура;
		//		ПараметрыФормы.Вставить("ЗначениеКопирования", СсылкаОбъекта);
		//		Форма = ПолучитьФормуЛкс(МетаФорма_ПолноеИмя, ПараметрыФормы, , КлючВременнойФормы);
		////		Если Выборка.Следующий() Тогда
		////			ПараметрыФормы.Вставить("ЗначениеКопирования", Выборка.Ссылка);
		////		КонецЕсли; 
		////		Форма = ПолучитьФормуЛкс(МетаФорма.ПолноеИмя(), ПараметрыФормы, , КлючВременнойФормы);
		////		//Форма = ирНеглобальный.ПолучитьФормуЛкс(МетаФорма.ПолноеИмя(), ПараметрыФормы, , КлючВременнойФормы);
		//	КонецЕсли; 
		//Иначе
		//	Форма = ПолучитьНовуюФорму(МетаФорма_ПолноеИмя, ВнешнийОбъект, КлючВременнойФормы);
		//	Если Форма = Неопределено Тогда
		//		//ОтменитьТранзакцию();
		//		Возврат; //Продолжить;
		//	КонецЕсли;				
	КонецЕсли;
	ТестироватьФорму(Форма, ИмяОперации);
	//Исключение
	//	ДобавитьСтрокуРезультата(ИмяОперации, ИнформацияОбОшибке());
	//КонецПопытки;
	//ОтменитьТранзакцию();
КонецПроцедуры

Процедура СоздатьИменаОсновныхФорм()
	Если Не ЗначениеЗаполнено(мИменаОсновныхФорм) Тогда
		мИменаОсновныхФорм = Новый Массив();
	КонецЕсли;
	СоздатьИменаОсновныхФорм_Объекты();
	СоздатьИменаОсновныхФормСписка();
	Для каждого эл Из мИменаОсновныхФорм_Объекты Цикл
		мИменаОсновныхФорм.Добавить(эл);
	КонецЦикла;
	Для каждого эл Из мИменаОсновныхФорм_Списки Цикл
		мИменаОсновныхФорм.Добавить(эл);
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьИменаОсновныхФорм_Объекты()
	Если Не ЗначениеЗаполнено(мИменаОсновныхФорм_Объекты) Тогда
		мИменаОсновныхФорм_Объекты = Новый Массив();
	КонецЕсли;
	мИменаОсновныхФорм_Объекты.Добавить("ОсновнаяФорма");
	мИменаОсновныхФорм_Объекты.Добавить("ОсновнаяФормаОбъекта");
	мИменаОсновныхФорм_Объекты.Добавить("ОсновнаяФормаГруппы");
	мИменаОсновныхФорм_Объекты.Добавить("ОсновнаяФормаЗаписи");
	мИменаОсновныхФорм_Объекты.Добавить("ОсновнаяФормаНастроек");
	мИменаОсновныхФорм_Объекты.Добавить("ОсновнаяФормаСохранения");
	мИменаОсновныхФорм_Объекты.Добавить("ОсновнаяФормаЗагрузки");
	
	мИменаОсновныхФорм_Объекты.Добавить("ДополнительнаяФорма");
	мИменаОсновныхФорм_Объекты.Добавить("ДополнительнаяФормаОбъекта");
	мИменаОсновныхФорм_Объекты.Добавить("ДополнительнаяФормаГруппы");
	мИменаОсновныхФорм_Объекты.Добавить("ДополнительнаяФормаЗаписи");
	мИменаОсновныхФорм_Объекты.Добавить("ДополнительнаяФормаНастроек");
	мИменаОсновныхФорм_Объекты.Добавить("ДополнительнаяФормаСохранения");
	мИменаОсновныхФорм_Объекты.Добавить("ДополнительнаяФормаЗагрузки");
КонецПроцедуры

Процедура СоздатьИменаОсновныхФормСписка()
	Если Не ЗначениеЗаполнено(мИменаОсновныхФорм_Списки) Тогда
		мИменаОсновныхФорм_Списки = Новый Массив();
	КонецЕсли;
	мИменаОсновныхФорм_Списки.Добавить("ОсновнаяФормаСписка");
	мИменаОсновныхФорм_Списки.Добавить("ОсновнаяФормаДляВыбора");
	мИменаОсновныхФорм_Списки.Добавить("ОсновнаяФормаДляВыбораГруппы");
	мИменаОсновныхФорм_Списки.Добавить("ОсновнаяФормаКонстант");
	
	мИменаОсновныхФорм_Списки.Добавить("ДополнительнаяФормаСписка");
	мИменаОсновныхФорм_Списки.Добавить("ДополнительнаяФормаДляВыбора");
	мИменаОсновныхФорм_Списки.Добавить("ДополнительнаяФормаДляВыбораГруппы");
	мИменаОсновныхФорм_Списки.Добавить("ДополнительнаяФормаКонстант");
КонецПроцедуры

Процедура СоздатьФорму_ПолучениеФорм()
	мПолучениеФорм = ПолучитьФорму("ПолучениеФорм");
КонецПроцедуры

Функция ПолучитьМетаФормыОбъектаДляПроверки(МетаОбъект, ИменаОсновныхФорм)
	
	МетаФормы = Новый Массив();
	Для Каждого ИмяОсновнойФормы Из ИменаОсновныхФорм Цикл
		Попытка
			МетаФорма = МетаОбъект[ИмяОсновнойФормы];
		Исключение
			Продолжить;
		КонецПопытки;
		Если МетаФорма = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если МетаФормы.Найти(МетаФорма) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		МетаФормы.Добавить(МетаФорма);
	КонецЦикла;
	Возврат МетаФормы;
	
КонецФункции

Функция ПолучитьФормуЛкс(ИмяФормы, Параметры = Неопределено, Владелец = Неопределено, Уникальность = Неопределено, Окно = Неопределено) Экспорт
	
	Возврат мПолучениеФорм.ПолучитьФормуЛкс(ИмяФормы, Параметры, Владелец, Уникальность, Окно);
	
КонецФункции

Функция ПолучитьНовуюФорму(МетаФорма, ВнешнийОбъект = Неопределено, КлючВременнойФормы = Неопределено)

	//Если ВнешнийОбъект <> Неопределено Тогда
	//	Форма = ВнешнийОбъект.ПолучитьФорму(МетаФорма.Имя, , КлючВременнойФормы);
	//Иначе
		Форма = ПолучитьФормуЛкс(МетаФорма, , , КлючВременнойФормы); //ирНеглобальный.
		//Форма = ПолучитьФормуЛкс(МетаФорма.ПолноеИмя(), , , КлючВременнойФормы); //ирНеглобальный.
	//КонецЕсли; 
	Возврат Форма;

КонецФункции

Функция ТестироватьФорму(Форма, ИмяОперации = "") Экспорт
	_Форма = Форма;
	Форма.Открыть(); // К сожалению здесь исключения не ловятся http://partners.v8.1c.ru/forum/thread.jsp?id=1080350#1080350
		юТест.Проверить(_Форма.Открыта(), "_Форма """+ИмяОперации+""" не открылась, а должна была открыться");
		
	// Артур - мой код для доп.проверки формы
	Если ЭтоОбычнаяФорма(_Форма) Тогда
		_Форма.Обновить();
	Иначе
	//ИначеЕсли ТипЗнч(_Форма) = Тип("УправляемаяФорма") Тогда
		_Форма.ОбновитьОтображениеДанных();
	КонецЕсли;
		//Попытка
		//	Форма = Форма.мСвойстваФормы.КонечнаяФорма; // Для системы 2iS
		//Исключение
		//КонецПопытки;
	//Если Форма.Открыта() Тогда
	//		//Попытка
	//		//	ТестироватьЭлементыФормы(Форма);
	//		//Исключение
	//		//	Ошибка = ИмяОперации + ". " + ИнформацияОбОшибке();
	//		//	Если ТранзакцияАктивна() Тогда
	//		//		ОтменитьТранзакцию();
	//		//	КонецЕсли;
	//		//	ВызватьИсключение Ошибка; //ДобавитьСтрокуРезультата(ИмяОперации, ИнформацияОбОшибке());
	//		//	//НачатьТранзакцию();
	//		//КонецПопытки; 
	//	Форма.Модифицированность = Ложь;
	//	Попытка
	//		Форма.Закрыть();
	//	Исключение
	//		Ошибка = ИмяОперации + ". " + ИнформацияОбОшибке();
	//		Если ТранзакцияАктивна() Тогда
	//			ОтменитьТранзакцию();
	//		КонецЕсли;
	//		//ДобавитьСтрокуРезультата(ИмяОперации, ИнформацияОбОшибке());
	//		НачатьТранзакцию();
	//		Форма.УстановитьДействие("ПередЗакрытием", Неопределено);
	//		Форма.УстановитьДействие("ПриЗакрытии", Неопределено);
	//		Форма.Закрыть();
	//		ВызватьИсключение Ошибка; 			
	//	КонецПопытки; 
	//КонецЕсли;

КонецФункции

//} конец блока работы с управляемыми формами - из "Инструменты разработчика"

Функция ЭтоОбычнаяФорма(Форма)
	Возврат ТипЗнч(Форма) = Тип("Форма");
КонецФункции

Процедура ДобавитьТестДляМетаданного(ВсеТесты, менеджерМетаданного, имяТеста, списокИсключений, ИменаОсновныхФорм)
	Для Каждого МетаОбъект Из менеджерМетаданного Цикл
		Если списокИсключений.НайтиПоЗначению(МетаОбъект.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ПравоДоступа("Просмотр", МетаОбъект) Тогда
			МетаФормы = ПолучитьМетаФормыОбъектаДляПроверки(МетаОбъект, ИменаОсновныхФорм);

			Для каждого МетаФорма Из МетаФормы Цикл
				МетаФорма_ПолноеИмя = МетаФорма.ПолноеИмя();
				ПредставлениеТеста = МетаФорма_ПолноеИмя;
				лПараметры = Новый Структура("ПредставлениеТеста,ИмяТеста,Транзакция,Параметр", ПредставлениеТеста, имяТеста, Истина, МетаФорма_ПолноеИмя);
				ВсеТесты.Добавить(лПараметры);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьТестДляМетаданного_Справочник_Объекты(ВсеТесты, менеджерМетаданного, имяТеста, списокИсключений, ИменаОсновныхФорм, ПрефиксПредставленияТеста)
	Для Каждого МетаОбъект Из менеджерМетаданного Цикл
		Если списокИсключений.НайтиПоЗначению(МетаОбъект.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ПравоДоступа("Просмотр", МетаОбъект) или ПравоДоступа("ИнтерактивноеДобавление", МетаОбъект)) 
			и ПравоДоступа("Добавление", МетаОбъект) 
			Тогда
				МетаФормы = ПолучитьМетаФормыОбъектаДляПроверки(МетаОбъект, ИменаОсновныхФорм);
				Для каждого МетаФорма Из МетаФормы Цикл
					МетаФорма_ПолноеИмя = МетаФорма.ПолноеИмя();
					ПредставлениеТеста = ПрефиксПредставленияТеста + " : " + МетаФорма_ПолноеИмя;
					Структура = Новый Структура("МетаИмя,МетаФорма_ПолноеИмя,МетаФорма", МетаОбъект.Имя, МетаФорма_ПолноеИмя, МетаФорма);
					лПараметры = Новый Структура("ПредставлениеТеста,ИмяТеста,Транзакция,Параметр", ПредставлениеТеста, имяТеста, Истина, Структура);
					ВсеТесты.Добавить(лПараметры);
				КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура Тест_ОткрытьФормуСуществующегоДокумента(ПараметрыТеста) Экспорт
	ИД = ПараметрыТеста.МетаИмя;
	Док = ПолучитьСуществующийДокументОбъект(ИД, Истина, "Тест_ОткрытьФормуСуществующегоДокумента");
		
	ОткрытьФорму_ПоМетаФорме(ПараметрыТеста.МетаФорма_ПолноеИмя, ПараметрыТеста.МетаФорма.Имя, Док.Ссылка);
КонецПроцедуры

Процедура Тест_ПеренестиДокументНаТекущийДень_и_ОткрытьЕгоФорму(ПараметрыТеста) Экспорт
	ИД = ПараметрыТеста.МетаИмя;
	Док = ПолучитьСуществующийДокументОбъект(ИД, Ложь, "Тест_ПеренестиДокументНаТекущийДень_и_ОткрытьЕгоФорму");
	Если Док = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Док.Дата = ТекущаяДата();
	Док.ОбменДанными.Загрузка = Истина;
	Док.Записать();
	
	ОткрытьФорму_ПоМетаФорме(ПараметрыТеста.МетаФорма_ПолноеИмя, ПараметрыТеста.МетаФорма.Имя, Док.Ссылка);
КонецПроцедуры

Процедура Тест_ОткрытьФормуНовогоДокумента(ПараметрыТеста) Экспорт
	ИД = ПараметрыТеста.МетаИмя;
	Док = Документы[ИД].СоздатьДокумент();
	Мета = Док.Метаданные();
	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", Мета) Тогда
		Возврат;
	КонецЕсли;
	Если Мета.ДлинаНомера <> 0 Тогда
		Попытка
			Док.УстановитьНовыйНомер();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ОткрытьФорму_ПоМетаФорме(ПараметрыТеста.МетаФорма_ПолноеИмя, ПараметрыТеста.МетаФорма.Имя, Док, Ложь);
КонецПроцедуры

Функция ПолучитьСуществующийДокументОбъект(ИД, НужноИсключениеЕслиНеНайденоДокументов, ДопОписаниеДляИсключения)
	выборка = Документы[ИД].Выбрать(,,, "Дата Убыв");
	уcпешно = выборка.Следующий();
	Если Не уcпешно Тогда
		Если НужноИсключениеЕслиНеНайденоДокументов Тогда
			ВызватьИсключение ДопОписаниеДляИсключения + ": выборка.Следующий() - не найдено существующих документов! ";
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Док = выборка.ПолучитьОбъект();
	Возврат Док;
КонецФункции

Процедура Тест_ОткрытьФормуСуществующегоЭлементаСправочника(ПараметрыТеста) Экспорт
	ИД = ПараметрыТеста.МетаИмя;
	Элем = СоздатьЭлемент(ИД, "существующий");
	ОткрытьФорму_ПоМетаФорме(ПараметрыТеста.МетаФорма_ПолноеИмя, ПараметрыТеста.МетаФорма.Имя, Элем.Ссылка);
КонецПроцедуры

Процедура Тест_ОткрытьФормуНовогоЭлементаСправочника(ПараметрыТеста) Экспорт
	ИД = ПараметрыТеста.МетаИмя;
	Элем = Справочники[ИД].СоздатьЭлемент();
	Мета = Элем.Метаданные();
	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", Мета) Тогда
		Возврат;
	КонецЕсли;
	Если Мета.ДлинаНаименования <> 0 Тогда
		Попытка
			Элем.Наименование = "новый";
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ОткрытьФорму_ПоМетаФорме(ПараметрыТеста.МетаФорма_ПолноеИмя, ПараметрыТеста.МетаФорма.Имя, Элем, Ложь);
КонецПроцедуры

Процедура Тест_ОткрытьФормуНовогоЭлементаСправочникаСоздаваемогоКопированием(ПараметрыТеста) Экспорт
	ИД = ПараметрыТеста.МетаИмя;
	Элем = СоздатьЭлемент(ИД, "копирование", "ИнтерактивноеДобавление");
	Если Элем = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму_ПоМетаФорме(ПараметрыТеста.МетаФорма_ПолноеИмя, ПараметрыТеста.МетаФорма.Имя, Элем.Ссылка, Истина);
КонецПроцедуры

Функция СоздатьЭлемент(ИД, Наименование, ПроверяемоеПравоДоступа = Неопределено)
	Элем = Справочники[ИД].СоздатьЭлемент();
	Мета = Элем.Метаданные();
	Если ПроверяемоеПравоДоступа <> Неопределено И НЕ ПравоДоступа(ПроверяемоеПравоДоступа, Мета) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Мета.ДлинаНаименования <> 0 Тогда
		Попытка
			Элем.Наименование = Наименование;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если Мета.ДлинаКода <> 0 Тогда
		Элем.УстановитьНовыйКод();
	КонецЕсли;
	Элем.ОбменДанными.Загрузка = Истина;
	Элем.Записать();
	Возврат Элем;
КонецФункции

Функция ПолучитьСписокИсключений_Справочники_Списки()
	Результат = Новый СписокЗначений;
	
	Результат.Добавить("ирАлгоритмы");
	
	Возврат Результат;
КонецФункции

//{ блок переопределения исключений, чтобы не открывать формы
Функция ПолучитьСписокИсключений_Справочники_Существующие()
	Результат = Новый СписокЗначений;
	
	Результат.Добавить("ирАлгоритмы");
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокИсключений_Справочники_Новые()
	Результат = Новый СписокЗначений;
	
	Результат.Добавить("ирАлгоритмы");
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокИсключений_Документы_Списки()
	Результат = Новый СписокЗначений;
	
	//Результат.Добавить("ШтрафАСЦ");
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокИсключений_Документы_Существующие()
	Результат = Новый СписокЗначений;
	
	//Результат.Добавить("ШтрафАСЦ");
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокИсключений_Документы_ПеренестиДату()
	Результат = Новый СписокЗначений;
	
	//Результат.Добавить("ШтрафАСЦ");
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокИсключений_Документы_Новые()
	Результат = Новый СписокЗначений;
	
	Результат.Добавить("ШтрафАСЦ");
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокИсключений_Отчеты()
	Результат = Новый СписокЗначений;
	
	//Результат.Добавить("Цены");
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокИсключений_Обработки()
	Результат = Новый СписокЗначений;
	
	//Результат.Добавить("Цены");
	
	Возврат Результат;
КонецФункции
//} конец блока