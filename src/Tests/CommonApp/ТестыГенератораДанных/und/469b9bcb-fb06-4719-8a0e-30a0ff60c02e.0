{2,
{28,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0},
{0},1,
{17,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},1,
{0,0,1},0,1},0,"","",1,
{17,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{6,3,0,1},
{0,0,0},0,0,1}
},"&НаКлиенте
Перем ЮТест;  // для тестирования

&НаКлиенте
Перем ЮнитТестированиеИмя;

//{ основная процедура для юнит-тестирования xUnitFor1C
&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	ЮнитТестированиеИмя = ЮнитТестирование.МетаданныеИмя();
	
	ЮТест = ЮнитТестирование;
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить(""ТестДолжен_ПодключитьЮТестИзТестаМодуляФормыВТестеМодуляОбработки"");

	Возврат ВсеТесты;	
КонецФункции
//}

//{ блок юнит-тестов - сами тесты

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	ИмяПеременнойПользователь = ""Пользователь12"";
	ПользовательИмя = ""ТестИмя12"";
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	УдалитьТестовыеДанныеСервер(ЮнитТестированиеИмя);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПодключитьЮТестИзТестаМодуляФормыВТестеМодуляОбработки() Экспорт
	
	СоздатьТестовыеДанныеСервер(ЮнитТестированиеИмя);
	
	ЮТест.ПроверитьРавенство(2, ТестовыеДанныеУФ.Количество(), ""ТестовыеДанныеУФ.Количество()"");
	
	Строка = ТестовыеДанныеУФ[0];
	ЮТест.ПроверитьРавенство(""ПользовательИнформационнойБазы"", Строка.Ключ, ""Строка.Ключ УФ"");
	ЭлементСпискаЗначений = Строка.Значение[0];
	ЮТест.ПроверитьРавенство(ПользовательИмя, СокрЛП(ЭлементСпискаЗначений.Значение), ""ЭлементСпискаЗначений.Значение УФ"");
	ЮТест.ПроверитьРавенство(ИмяПеременнойПользователь, ЭлементСпискаЗначений.Представление, ""ЭлементСпискаЗначений.Представление УФ"");
	
	ЭлементСпискаЗначений = ТестовыеДанныеУФ[1];
	ЮТест.ПроверитьРавенство(""Тестовое наименование"", """"+ЭлементСпискаЗначений.Значение[0].Значение, ""УФ"");
	
	УдалитьТестовыеДанныеСервер(ЮнитТестированиеИмя);
КонецПроцедуры

&НаСервере
Процедура СоздатьТестовыеДанныеСервер(Знач ЮТестПуть)
	
	ЮТест = ВнешниеОбработки.Создать(ЮТестПуть);
	
	ИмяМакета = ""СозданиеОдногоПользователяИБ"";
	//ИмяМакета = ""СозданиеОдногоПользователяИБ_УФ"";
	
	ОсновнойОбъект = Объект();
	МассивИменПользователей = МассивИменПользователейПоУмолчанию();
	Для каждого ИмяПользователя Из МассивИменПользователей Цикл
		УдалитьПользователяИБ_ЕслиОнСуществует(ИмяПользователя);
	КонецЦикла;
	
	КоллекцияПараметров = Новый Структура(""ИмяПеременнойПользователь, ПользовательИмя"", ИмяПеременнойПользователь, ПользовательИмя);
	НовыйТабДок = ОсновнойОбъект.ПолучитьМакетДанныхДоступа(ИмяМакета, КоллекцияПараметров);
	
	МассивМакетов = Новый Массив;
	МассивМакетов.Добавить(НовыйТабДок);
	МассивМакетов.Добавить(ОсновнойОбъект.ПолучитьМакет(""СозданиеПростогоСправочника""));
	
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(МассивМакетов);
	
	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИмя);
	ЮТест.ПроверитьНеравенство(лПользователь, Неопределено, ""лПользователь"");
	
	ЮТест.ПроверитьРавенство(""Тестовое наименование"", ТестовыеДанные.ПростойСправочник.Наименование);
	
	ТестовыеДанныеУФ.Очистить();
	ЮТест.ПроверитьРавенство(0, ТестовыеДанныеУФ.Количество(), ""ТестовыеДанныеУФ.Количество()"");

	ТестовыеДанныеДляУФ = Новый ТаблицаЗначений;
	Колонка = ТестовыеДанныеДляУФ.Колонки.Добавить(""Ключ"");
	Колонка = ТестовыеДанныеДляУФ.Колонки.Добавить(""Значение"");
	
	Для каждого ключЗначение Из ТестовыеДанные Цикл
		СписокВрем = Новый СписокЗначений;
		Строка = ТестовыеДанныеДляУФ.Добавить();
		Если ТипЗнч(ключЗначение.Значение) = Тип(""ПользовательИнформационнойБазы"") Тогда
			СписокВрем.Добавить(ключЗначение.Значение.Имя, ключЗначение.Ключ);
			Строка.Ключ = ""ПользовательИнформационнойБазы"";
		Иначе
			Строка.Ключ = ключЗначение.Ключ;
			СписокВрем.Добавить(ключЗначение.Значение);
		КонецЕсли;
		Строка.Значение = СписокВрем;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ТестовыеДанныеДляУФ, ТестовыеДанныеУФ);
	
	ЮТест.ПроверитьРавенство(ТестовыеДанные.Количество(), ТестовыеДанныеУФ.Количество(), ""ТестовыеДанные.Количество(), ТестовыеДанныеУФ.Количество()"");
	Строка = ТестовыеДанныеУФ[0];
	ЮТест.ПроверитьРавенство(""ПользовательИнформационнойБазы"", Строка.Ключ, ""Строка.Ключ"");
	ЭлементСпискаЗначений = Строка.Значение[0];
	ЮТест.ПроверитьРавенство(ПользовательИмя, СокрЛП(ЭлементСпискаЗначений.Значение), ""ЭлементСпискаЗначений.Значение"");
	ЮТест.ПроверитьРавенство(ИмяПеременнойПользователь, ЭлементСпискаЗначений.Представление, ""ЭлементСпискаЗначений.Представление"");
	
	ЭлементСпискаЗначений = ТестовыеДанныеУФ[1];
	ЮТест.ПроверитьРавенство(""Тестовое наименование"", ЭлементСпискаЗначений.Значение[0].Значение.Наименование, ""сервер"");
КонецПроцедуры

&НаСервере
Процедура УдалитьТестовыеДанныеСервер(Знач ЮТестПуть)
	
	Если ТестовыеДанныеУФ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЮТест = ВнешниеОбработки.Создать(ЮТестПуть);
	
	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИмя);
	ЮТест.ПроверитьНеравенство(лПользователь, Неопределено, ""лПользователь должен существовать"");
	
	ТестовыеДанные = Новый Структура;
	Для каждого Строка Из ТестовыеДанныеУФ Цикл
		Если Строка.Ключ = ""ПользовательИнформационнойБазы"" Тогда
			ЭлементСпискаЗначений = Строка.Значение[0];
			лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(ЭлементСпискаЗначений.Значение));
			ТестовыеДанные.Вставить(ЭлементСпискаЗначений.Представление, лПользователь);
		Иначе
			ТестовыеДанные.Вставить(Строка.Ключ, Строка.Значение[0].Значение);
		КонецЕсли;
	КонецЦикла;
	
	юТест.УдалитьСозданныеДанные(ТестовыеДанные);
	
	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИмя);
	ЮТест.ПроверитьРавенство(лПользователь, Неопределено, ""лПользователь должен быть удален"");
	
	ТестовыеДанныеУФ.Очистить();
КонецПроцедуры

Функция МассивИменПользователейПоУмолчанию()
	Рез = Новый Массив();
	Рез.Добавить(ПользовательИмя); //""ТестИмя"");
	//Рез.Добавить(""ТестИмя2"");// должно совпадать с макетом;
	Возврат Рез;
КонецФункции

&НаСервере
Функция Объект()
	Возврат РеквизитФормыВЗначение(""Объект"");
КонецФункции

Процедура УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя) Экспорт

	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Если лПользователь <> Неопределено Тогда
		лПользователь.Удалить();
	КонецЕсли;

КонецПроцедуры


//} конец блока юнит-тестов
",
{4,4,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",c303cfea-5e87-4f36-bd34-286c1fc6cc41}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"ТестовыеДанныеУФ",
{1,1,
{"ru","Тестовые данные УФ"}
},
{"Pattern",
{"#",acf6192e-81ca-46ef-93a6-5a6968b78663}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,2,
{5,1,0,"Ключ",
{1,1,
{"ru","Ключ"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Значение",
{1,1,
{"ru","Значение"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{4},0,"ИмяПеременнойПользователь",
{1,1,
{"ru","Имя переменной пользователь"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"ПользовательИмя",
{1,1,
{"ru","Пользователь имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,0},
{0,0},
{0,0}
}