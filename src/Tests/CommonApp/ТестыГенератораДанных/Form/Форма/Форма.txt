&НаКлиенте
Перем ЮТест;  // для тестирования

&НаКлиенте
Перем ЮнитТестированиеИмя;

//{ основная процедура для юнит-тестирования xUnitFor1C
&НаКлиенте
Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	ЮнитТестированиеИмя = ЮнитТестирование.МетаданныеИмя();
	
	ЮТест = ЮнитТестирование;
	ВсеТесты = Новый Массив;

	ВсеТесты.Добавить("ТестДолжен_ПодключитьЮТестИзТестаМодуляФормыВТестеМодуляОбработки");

	Возврат ВсеТесты;	
КонецФункции
//}

//{ блок юнит-тестов - сами тесты

&НаКлиенте
Процедура ПередЗапускомТеста() Экспорт
	ИмяПеременнойПользователь = "Пользователь12";
	ПользовательИмя = "ТестИмя12";
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаТеста() Экспорт
	УдалитьТестовыеДанныеСервер(ЮнитТестированиеИмя);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПодключитьЮТестИзТестаМодуляФормыВТестеМодуляОбработки() Экспорт
	
	СоздатьТестовыеДанныеСервер(ЮнитТестированиеИмя);
	
	ЮТест.ПроверитьРавенство(2, ТестовыеДанныеУФ.Количество(), "ТестовыеДанныеУФ.Количество()");
	
	Строка = ТестовыеДанныеУФ[0];
	ЮТест.ПроверитьРавенство("ПользовательИнформационнойБазы", Строка.Ключ, "Строка.Ключ УФ");
	ЭлементСпискаЗначений = Строка.Значение[0];
	ЮТест.ПроверитьРавенство(ПользовательИмя, СокрЛП(ЭлементСпискаЗначений.Значение), "ЭлементСпискаЗначений.Значение УФ");
	ЮТест.ПроверитьРавенство(ИмяПеременнойПользователь, ЭлементСпискаЗначений.Представление, "ЭлементСпискаЗначений.Представление УФ");
	
	ЭлементСпискаЗначений = ТестовыеДанныеУФ[1];
	ЮТест.ПроверитьРавенство("Тестовое наименование", ""+ЭлементСпискаЗначений.Значение[0].Значение, "УФ");
	
	УдалитьТестовыеДанныеСервер(ЮнитТестированиеИмя);
КонецПроцедуры

&НаСервере
Процедура СоздатьТестовыеДанныеСервер(Знач ЮТестПуть)
	
	ЮТест = ВнешниеОбработки.Создать(ЮТестПуть);
	
	ИмяМакета = "СозданиеОдногоПользователяИБ";
	//ИмяМакета = "СозданиеОдногоПользователяИБ_УФ";
	
	ОсновнойОбъект = Объект();
	МассивИменПользователей = МассивИменПользователейПоУмолчанию();
	Для каждого ИмяПользователя Из МассивИменПользователей Цикл
		УдалитьПользователяИБ_ЕслиОнСуществует(ИмяПользователя);
	КонецЦикла;
	
	КоллекцияПараметров = Новый Структура("ИмяПеременнойПользователь, ПользовательИмя", ИмяПеременнойПользователь, ПользовательИмя);
	НовыйТабДок = ОсновнойОбъект.ПолучитьМакетДанныхДоступа(ИмяМакета, КоллекцияПараметров);
	
	МассивМакетов = Новый Массив;
	МассивМакетов.Добавить(НовыйТабДок);
	МассивМакетов.Добавить(ОсновнойОбъект.ПолучитьМакет("СозданиеПростогоСправочника"));
	
	ТестовыеДанные = ЮТест.СоздатьДанныеПоТабличномуДокументу(МассивМакетов);
	
	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИмя);
	ЮТест.ПроверитьНеравенство(лПользователь, Неопределено, "лПользователь");
	
	ЮТест.ПроверитьРавенство("Тестовое наименование", ТестовыеДанные.ПростойСправочник.Наименование);
	
	ТестовыеДанныеУФ.Очистить();
	ЮТест.ПроверитьРавенство(0, ТестовыеДанныеУФ.Количество(), "ТестовыеДанныеУФ.Количество()");

	ТестовыеДанныеДляУФ = Новый ТаблицаЗначений;
	Колонка = ТестовыеДанныеДляУФ.Колонки.Добавить("Ключ");
	Колонка = ТестовыеДанныеДляУФ.Колонки.Добавить("Значение");
	
	Для каждого ключЗначение Из ТестовыеДанные Цикл
		СписокВрем = Новый СписокЗначений;
		Строка = ТестовыеДанныеДляУФ.Добавить();
		Если ТипЗнч(ключЗначение.Значение) = Тип("ПользовательИнформационнойБазы") Тогда
			СписокВрем.Добавить(ключЗначение.Значение.Имя, ключЗначение.Ключ);
			Строка.Ключ = "ПользовательИнформационнойБазы";
		Иначе
			Строка.Ключ = ключЗначение.Ключ;
			СписокВрем.Добавить(ключЗначение.Значение);
		КонецЕсли;
		Строка.Значение = СписокВрем;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ТестовыеДанныеДляУФ, ТестовыеДанныеУФ);
	
	ЮТест.ПроверитьРавенство(ТестовыеДанные.Количество(), ТестовыеДанныеУФ.Количество(), "ТестовыеДанные.Количество(), ТестовыеДанныеУФ.Количество()");
	Строка = ТестовыеДанныеУФ[0];
	ЮТест.ПроверитьРавенство("ПользовательИнформационнойБазы", Строка.Ключ, "Строка.Ключ");
	ЭлементСпискаЗначений = Строка.Значение[0];
	ЮТест.ПроверитьРавенство(ПользовательИмя, СокрЛП(ЭлементСпискаЗначений.Значение), "ЭлементСпискаЗначений.Значение");
	ЮТест.ПроверитьРавенство(ИмяПеременнойПользователь, ЭлементСпискаЗначений.Представление, "ЭлементСпискаЗначений.Представление");
	
	ЭлементСпискаЗначений = ТестовыеДанныеУФ[1];
	ЮТест.ПроверитьРавенство("Тестовое наименование", ЭлементСпискаЗначений.Значение[0].Значение.Наименование, "сервер");
КонецПроцедуры

&НаСервере
Процедура УдалитьТестовыеДанныеСервер(Знач ЮТестПуть)
	
	Если ТестовыеДанныеУФ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЮТест = ВнешниеОбработки.Создать(ЮТестПуть);
	
	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИмя);
	ЮТест.ПроверитьНеравенство(лПользователь, Неопределено, "лПользователь должен существовать");
	
	ТестовыеДанные = Новый Структура;
	Для каждого Строка Из ТестовыеДанныеУФ Цикл
		Если Строка.Ключ = "ПользовательИнформационнойБазы" Тогда
			ЭлементСпискаЗначений = Строка.Значение[0];
			лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(ЭлементСпискаЗначений.Значение));
			ТестовыеДанные.Вставить(ЭлементСпискаЗначений.Представление, лПользователь);
		Иначе
			ТестовыеДанные.Вставить(Строка.Ключ, Строка.Значение[0].Значение);
		КонецЕсли;
	КонецЦикла;
	
	юТест.УдалитьСозданныеДанные(ТестовыеДанные);
	
	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИмя);
	ЮТест.ПроверитьРавенство(лПользователь, Неопределено, "лПользователь должен быть удален");
	
	ТестовыеДанныеУФ.Очистить();
КонецПроцедуры

Функция МассивИменПользователейПоУмолчанию()
	Рез = Новый Массив();
	Рез.Добавить(ПользовательИмя); //"ТестИмя");
	//Рез.Добавить("ТестИмя2");// должно совпадать с макетом;
	Возврат Рез;
КонецФункции

&НаСервере
Функция Объект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

Процедура УдалитьПользователяИБ_ЕслиОнСуществует(лИмяПользователя) Экспорт

	лПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(лИмяПользователя);
	Если лПользователь <> Неопределено Тогда
		лПользователь.Удалить();
	КонецЕсли;

КонецПроцедуры


//} конец блока юнит-тестов
